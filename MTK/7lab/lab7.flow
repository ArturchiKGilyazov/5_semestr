import string;
import lingo/pegcode/driver;

Expr ::= IntConst, Mul, Add, Div, Sub, Neg, Var, RationalConst;
IntConst: (value:int);
RationalConst(value: Rational);
Mul: (left: Expr, right: Expr);
Add: (left: Expr, right: Expr);
Div: (left: Expr, right: Expr);
Sub: (left: Expr, right: Expr);
Neg: (arg: Expr);
Var: (name: string);

Rational(n:int, d:int);

rational(a:int) ->Rational{
    Rational(a,1);
}

Rational2str(r:Rational){
    i2s(r.n)+"/"+i2s(r.d);
}

parse(s:string) -> Expr{
    gram = "arr_gram.lingo";
    parsic(compilePegGrammar(gram), s, defaultPegActions);
}

/*expr2rpn(e : Expr) -> [Rpn]{
    switch (e){
        IntConst(v): [IntConstRpn(v)];
        Add(l, r): concat(concat(expr2rpn(l), expr2rpn(r)), [AddRpn()]);
        Mul(l, r): concat(concat(expr2rpn(l), expr2rpn(r)), [MulRpn()]);
    }
}*/

/*rpn2string(erpn : [Rpn]) -> string{
    fold(erpn, "", \acc, e -> {
            switch (e) {
                IntConstRpn(v): acc + i2s(v) + " ";
                AddRpn(): acc + "+ ";
                MulRpn(): acc + "* ";
            }
        }
    )
}*/

/*string2rpn(rpnInStringing : string) -> [Rpn]{
    stack: ref [Rpn] = ref [];
    strSplitIterate(rpnInStringing, " ", \ piece : string -> {
        if(isDigit(piece)){
            refArrayPush(stack, IntConstRpn(s2i(piece)));
        } else if(piece == "+"){
                refArrayPush(stack, AddRpn());
            } else if(piece == "*"){
                refArrayPush(stack, MulRpn());
            } else {
                println("Bad string");
            }
    });
    ^stack;
}*/

/*pop(stack: ref[?])-> ?{
    index = length(^stack) - 1;
    el = ^stack[index];
    stack := subrange(^stack, 0, length(^stack)-1);
    el;
}*/

maybe(f: (?, ??)->???, arg1:Maybe<?>, arg2:Maybe<??>) ->Maybe<???>{
    switch (arg1) {
        None(): None();
        Some(x) :
            switch (arg2) {
                None(): None();
                Some(y): Some(f(x,y));
            }
    }
}


Calc(e: Expr, value: [Pair<string, Rational>])-> Maybe<Rational>{
    switch(e: Expr){
        IntConst(c): Some(rational(c));
        RationalConst(rat) : Some(rat);
        Add(l, r): maybe(\x,y-> Rational(x.n*y.d+y.n*x.d, x.d*y.d), Calc(l, value), Calc(r, value));
        Mul(l, r): maybe(\x,y-> Rational(x.n*y.n, x.d*y.d), Calc(l, value), Calc(r, value));
        Sub(l, r): maybe(\x,y-> Rational(x.n*y.d-y.n*x.d, x.d*y.d), Calc(l, value), Calc(r, value));
        Div(l, r): maybe(\x,y-> Rational(x.n*y.d, x.d*y.n), Calc(l, value), Calc(r, value));
        Neg(v): maybe(\x,y-> Rational(x.n*y.n, x.d*y.d), Calc(v, value), Some(rational(-1)));
        Var(x): {
            index = findi(value, \p->p.first == x);
            switch (index) {
                None(): None();
                Some(i): Some(value[i].second);
            }
        }
    }
}


Print(e: Expr)->string{
    switch(e: Expr){
        IntConst(x) : i2s(x);
        RationalConst(rat) : Rational2str(rat);
        Mul(l, r): Print(l) + "*" + Print(r);
        Add(l, r): "(" + Print(l) + "+" + Print(r) + ")";
        Div(l, r):  Print(l) + "/" + Print(r);
        Sub(l, r): "(" + Print(l) + "-" + Print(r) + ")";
        Neg(arg): "(" + "-" + Print(arg) + ")";
        Var(x): x;
    }
}

main() {
    x = "x";
    a = "a"; 
    values = [Pair(x, Rational(1,2)), Pair(a, Rational(10,1))];
    //e = Mul(Add(IntConst(4), Mul(IntConst(2), IntConst(3))), IntConst(5));
    e = Add(Mul(IntConst(5), Div(IntConst(6), IntConst(3))),Mul(Sub(IntConst(7), IntConst(4)), RationalConst(Rational(5, 2))));
    println(Print(e));
    //println(Calc(parse(e),values));
    result = Calc(e, values);
    println(result);
    quit(0);
}