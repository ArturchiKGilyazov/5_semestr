import string;
import math/math;
import lingo/pegcode/driver;

Expr ::= IntConst, Mul, Add, Div, Sub, Neg, Var;
IntConst: (value:int);
Mul: (left: Expr, right: Expr);
Add: (left: Expr, right: Expr);
Div: (left: Expr, right: Expr);
Sub: (left: Expr, right: Expr);
Neg: (arg: Expr);
Var: (name: string);


arithGrammarOp : ref Maybe<[PegOp]> = ref None();
initGrammar(){
    onlyOnce(arithGrammarOp, \ -> {
        compilePegGrammar("#include arr_gram.lingo");
    });
}


Rational(n:int, d:int);

rational(a:int) ->Rational{
    Rational(a,1);
}

Rational2s(r:Rational){
    if(r.d == 1) {
        i2s(r.n)
    } else {
        i2s(r.n)+"/"+i2s(r.d);
    }
}

maybeOp(f: (?, ??)->???, arg1:Maybe<?>, arg2:Maybe<??>)->Maybe<???>{
    switch (arg1) {
        None(): None();
        Some(x) :
            switch (arg2) {
                None(): None();
                Some(y): Some(f(x,y));
            }
    }
}

RationalAdd(x: Rational, y: Rational){
    num = x.n * y.d + y.n * x.d;
    den = x.d * y.d;
    nod = gcd(num, den);
    Rational(num / nod, den / nod);
}

RationalMul(x: Rational, y: Rational){
    num = x.n * y.n;
    den = x.d * y.d;
    nod = gcd(num, den);
    Rational(num / nod, den / nod);
}

RationalSub(x: Rational, y: Rational){
    num = x.n * y.d - y.n * x.d;
    den = x.d * y.d;
    nod = gcd(num, den);
    Rational(num / nod, den / nod);
}

RationalDiv(x: Rational, y: Rational){
    num = x.n * y.d;
    den = x.d * y.n;
    nod = gcd(num, den);
    Rational(num / nod, den / nod);
}


Calc(e: Expr, value: [Pair<string, Rational>])-> Maybe<Rational>{
    switch(e: Expr){
        IntConst(c): Some(rational(c));
        Add(l, r): maybeOp(\x,y-> RationalAdd(x, y), Calc(l, value), Calc(r, value));
        Mul(l, r): maybeOp(\x,y-> RationalMul(x, y), Calc(l, value), Calc(r, value));
        Sub(l, r): maybeOp(\x,y-> RationalSub(x, y), Calc(l, value), Calc(r, value));
        Div(l, r): maybeOp(\x,y-> RationalDiv(x, y), Calc(l, value), Calc(r, value));
        Neg(v): maybeOp(\x,y-> RationalMul(x, y), Calc(v, value), Some(rational(-1)));
        Var(x): {
            index = findi(value, \p->p.first == x);
            switch (index) {
                None(): None();
                Some(i): Some(value[i].second);
            }
        }
    }
}

DerivativeMul(m : Mul, var : Var){
    ld = Derivative(m.left, var);
    rd = Derivative(m.right, var);
    Add(Mul(ld, m.right), Mul(m.left ,rd));
}

DerivativeDiv(d : Div, var : Var){
    ld = Derivative(d.left, var);
    rd = Derivative(d.right, var);
    Div(Sub(Mul(ld, d.right), Mul(d.left, rd)), Mul(d.right, d.right));
}

Derivative(e : Expr, var : Var){
    switch(e){
        IntConst(c): IntConst(0);
        Add(l,r): Add(Derivative(l, var), Derivative(r, var));
        Mul(l,r): DerivativeMul(e, var);
        Sub(l,r): Sub(Derivative(l, var), Derivative(r, var));
        Div(l,r): DerivativeDiv(e, var);
        Neg(v): Mul(IntConst(-1), Derivative(v, var));
        Var(x): {
            if (e == var ) {
                IntConst(1);
            }
            else {
                IntConst(0);
            }
        }
    }
}

SimplifyAdd(e : Add) -> Expr{
    l = Simplify(e.left);
    r = Simplify(e.right);
    switch (l){
        IntConst(c): {
            switch (r) {
               IntConst(d): IntConst(c+d);
               default: {
                   if (c == 0) {
                       r;
                   }
                   else {
                       Add(l,r);
                   }
               }
            }
        }
        default: {
            if (r == IntConst(0)) {
                l;
            }
            else {
                Add(l,r);
            }
        }
    }
}

SimplifyMul(e: Mul) -> Expr{
    l = Simplify(e.left);
    r = Simplify(e.right);
    if (l == IntConst(1)){
        r;
    } else 
        if (r == IntConst(1)){
            l;
        } else 
            if (l == IntConst(0) || r == IntConst(0)){
                IntConst(0);
            } else {
                Mul(l, r);
            }
}

SimplifySub(e: Sub) -> Expr{
    l = Simplify(e.left);
    r = Simplify(e.right);
    if (r == IntConst(0)){
        l;
    } else{
        Sub(l, r);
    }
}

SimplifyDiv(e : Div) -> Expr{
    l = Simplify(e.left);
    r = Simplify(e.right);
    if (l == r){
        IntConst(1);
    } else 
        if (r == IntConst(1)){
            l;
        } else 
            if (l == IntConst(0)){
                IntConst(0);
            } else {
                Div(l, r);
            }
}

Simplify(e : Expr)-> Expr{
    switch (e){
        Add(l, r): SimplifyAdd(e);
        Mul(l, r): SimplifyMul(e);
        Sub(l, r): SimplifySub(e);
        Div(l, r): SimplifyDiv(e);
        default: e;
    }
}

Print(e: Expr)->string{
    switch(e: Expr){
        IntConst(x) : i2s(x);
        Mul(l, r): Print(l) + "*" + Print(r);
        Add(l, r): "(" + Print(l) + "+" + Print(r) + ")";
        Div(l, r):  Print(l) + "/" + Print(r);
        Sub(l, r): "(" + Print(l) + "-" + Print(r) + ")";
        Neg(arg): "(" + "-" + Print(arg) + ")";
        Var(x): x;
    }
}

Parse(s:string)->Expr{
    parsic(initGrammar(), s, defaultPegActions);
}

main() {
    x = "x";
    y = "y"; 
    values = [Pair(x, Rational(1,2)), Pair(y, Rational(1,10))];
    e = "(((5*2)*x) + 1)";
    println(Calc(Parse(e),values));
    quit(0);
}